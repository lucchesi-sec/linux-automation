--- service_manager.sh.orig
+++ service_manager.sh
@@ -3,11 +3,12 @@
 # Provides functions for service management and monitoring
 
 # Source core libraries
 source "$(dirname "$0")/../../core/lib/init.sh"
+source "$(dirname "$0")/../../core/lib/system_api.sh"
 
 # Detect service manager
 detect_service_manager() {
-    if command -v systemctl >/dev/null 2>&1; then
-        echo "systemd"
-    elif command -v service >/dev/null 2>&1; then
-        echo "sysv"
-    # ... more checks
+    # Use System API instead of direct detection
+    system_api_get_service_manager
 }
 
 # List all services
 list_services() {
     local service_manager="${1:-$(detect_service_manager)}"
     
-    case "$service_manager" in
-        "systemd")
-            systemctl list-units --type=service --all --no-pager
-            ;;
-        "sysv")
-            service --status-all 2>&1
-            ;;
-        # ... more cases
-    esac
+    # Use System API to list services
+    system_api_list_services "$service_manager"
 }
 
 # Get service status
 get_service_status() {
     local service="$1"
     local service_manager="${2:-$(detect_service_manager)}"
     
-    case "$service_manager" in
-        "systemd")
-            systemctl is-active "$service" 2>/dev/null
-            ;;
-        "sysv")
-            service "$service" status >/dev/null 2>&1 && echo "active" || echo "inactive"
-            ;;
-        # ... more cases
-    esac
+    # Use System API to get service status
+    system_api_get_service_status "$service" "$service_manager"
 }
 
 # Start service
 start_service() {
     local service="$1"
     local service_manager="${2:-$(detect_service_manager)}"
     
     log_info "Starting service: $service"
     
-    case "$service_manager" in
-        "systemd")
-            systemctl start "$service"
-            ;;
-        "sysv")
-            service "$service" start
-            ;;
-        # ... more cases
-    esac
+    # Use System API to start service
+    if system_api_start_service "$service" "$service_manager"; then
+        log_success "Service $service started successfully"
+        return 0
+    else
+        log_error "Failed to start service $service"
+        return 1
+    fi
 }
 
 # Stop service
 stop_service() {
     local service="$1"
     local service_manager="${2:-$(detect_service_manager)}"
     
     log_info "Stopping service: $service"
     
-    case "$service_manager" in
-        "systemd")
-            systemctl stop "$service"
-            ;;
-        "sysv")
-            service "$service" stop
-            ;;
-        # ... more cases
-    esac
+    # Use System API to stop service
+    if system_api_stop_service "$service" "$service_manager"; then
+        log_success "Service $service stopped successfully"
+        return 0
+    else
+        log_error "Failed to stop service $service"
+        return 1
+    fi
 }