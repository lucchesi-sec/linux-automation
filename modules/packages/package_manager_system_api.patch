--- package_manager.sh.orig
+++ package_manager.sh
@@ -3,11 +3,12 @@
 # Provides functions for package management and updates
 
 # Source core libraries
 source "$(dirname "$0")/../../core/lib/init.sh"
+source "$(dirname "$0")/../../core/lib/system_api.sh"
 
 # Detect package manager
 detect_package_manager() {
-    if command -v apt-get >/dev/null 2>&1; then
-        echo "apt"
-    elif command -v dnf >/dev/null 2>&1; then
-        echo "dnf"
-    # ... more checks
+    # Use System API instead of direct commands
+    system_api_detect_package_manager
 }
 
 # Update package cache
 update_package_cache() {
     local package_manager="${1:-$(detect_package_manager)}"
     
     log_info "Updating package cache for $package_manager"
     
-    case "$package_manager" in
-        "apt")
-            if apt-get update >/dev/null 2>&1; then
-                log_success "Package cache updated successfully"
-                return 0
-            else
-                log_error "Failed to update package cache"
-                return 1
-            fi
-            ;;
-        # ... more cases
-    esac
+    # Use System API for package cache update
+    if system_api_update_package_cache "$package_manager"; then
+        log_success "Package cache updated successfully"
+        return 0
+    else
+        log_error "Failed to update package cache"
+        return 1
+    fi
 }
 
 # Check for available security updates
 check_security_updates() {
     local package_manager="${1:-$(detect_package_manager)}"
     local report_file="${2:-/tmp/security_updates_$(date +%Y%m%d).txt}"
     
     log_info "Checking for security updates using $package_manager"
     
     # Update package cache first
     update_package_cache "$package_manager"
     
-    case "$package_manager" in
-        "apt")
-            # For APT, we need to check for security updates
-            local security_updates
-            security_updates=$(apt list --upgradable 2>/dev/null | grep -E "(security|Security)" || true)
-            # ... processing
-            ;;
-        # ... more cases
-    esac
+    # Use System API to list upgradeable packages
+    local upgradeable_packages
+    upgradeable_packages=$(system_api_list_upgradeable_packages "$package_manager")
+    
+    # Filter for security updates (this logic remains as analysis)
+    local security_updates
+    security_updates=$(echo "$upgradeable_packages" | grep -E "(security|Security)" || true)
+    
+    # Process the updates...
 }
 
 # Install package
 install_package() {
     local package="$1"
     local package_manager="${2:-$(detect_package_manager)}"
     
     log_info "Installing package: $package"
     
-    case "$package_manager" in
-        "apt")
-            apt-get install -y "$package"
-            ;;
-        # ... more cases
-    esac
+    # Use System API for package installation
+    if system_api_install_package "$package" "$package_manager"; then
+        log_success "Package $package installed successfully"
+        return 0
+    else
+        log_error "Failed to install package $package"
+        return 1
+    fi
 }