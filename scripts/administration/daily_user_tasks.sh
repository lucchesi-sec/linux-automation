#!/bin/bash
# Daily User Administration Tasks
# Automated script for routine user management operations

# Source core libraries and user management module
source "$(dirname "$0")/../../core/lib/init.sh"
source "$(dirname "$0")/../../modules/users/user_manager.sh"

# Configuration
SCRIPT_NAME="Daily User Tasks"
REPORT_DIR="/var/log/bash-admin/daily-reports"
TODAY=$(date +%Y%m%d)

# Main execution function
main() {
    log_info "Starting $SCRIPT_NAME"
    
    # Run comprehensive user management
    if run_user_management; then
        log_success "Daily user management tasks completed successfully"
        return 0
    else
        log_error "Daily user management tasks completed with security issues"
        return 1
    fi
}

# Generate HTML summary report
generate_summary_report() {
    local results=("$@")
    local report_file="$REPORT_DIR/daily_user_summary_$TODAY.html"
    
    cat > "$report_file" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>Daily User Administration Report - $(date)</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background-color: #f0f0f0; padding: 10px; border-radius: 5px; }
        .task-success { color: green; }
        .task-warning { color: orange; }
        .task-error { color: red; }
        .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Daily User Administration Report</h1>
        <p><strong>Date:</strong> $(date)</p>
        <p><strong>Server:</strong> $(hostname)</p>
    </div>
    
    <div class="section">
        <h2>Task Summary</h2>
        <ul>
EOF
    
    for result in "${results[@]}"; do
        if [[ "$result" =~ ^✓ ]]; then
            echo "            <li class=\"task-success\">$result</li>" >> "$report_file"
        elif [[ "$result" =~ ^⚠ ]]; then
            echo "            <li class=\"task-warning\">$result</li>" >> "$report_file"
        else
            echo "            <li class=\"task-error\">$result</li>" >> "$report_file"
        fi
    done
    
    cat >> "$report_file" << EOF
        </ul>
    </div>
    
    <div class="section">
        <h2>System Information</h2>
        <table>
            <tr><th>Metric</th><th>Value</th></tr>
            <tr><td>Total Users</td><td>$(getent passwd | wc -l)</td></tr>
            <tr><td>Active Users (UID >= 1000)</td><td>$(getent passwd | awk -F: '$3 >= 1000 {print $1}' | wc -l)</td></tr>
            <tr><td>Last System Boot</td><td>$(uptime -s)</td></tr>
            <tr><td>Current Load</td><td>$(uptime | awk -F'load average:' '{print $2}')</td></tr>
        </table>
    </div>
    
    <div class="section">
        <h2>Reports Generated</h2>
        <ul>
            <li><a href="user_accounts_$TODAY.txt">User Account Report</a></li>
            <li><a href="failed_logins_$TODAY.txt">Failed Login Report</a></li>
        </ul>
    </div>
    
    <div class="section">
        <p><em>Report generated by Linux Automation System at $(date)</em></p>
    </div>
</body>
</html>
EOF
    
    log_info "Summary report generated: $report_file"
    
    # Send email notification with summary
    local subject="Daily User Administration Report - $(hostname)"
    local recipient=$(get_config "notifications.recipients.admin")
    
    if [[ -n "$recipient" ]]; then
        send_email "$recipient" "$subject" "Please find attached the daily user administration report." "$report_file"
    fi
}

# Show usage information
show_usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Daily User Administration Tasks

Options:
    -h, --help          Show this help message
    -v, --verbose       Enable verbose logging
    -q, --quiet         Suppress non-error output

Examples:
    $0                  Run all daily user tasks
    $0 --verbose        Run with detailed logging
    $0 --quiet          Run silently

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        -v|--verbose)
            set_log_level "DEBUG"
            shift
            ;;
        -q|--quiet)
            set_log_level "ERROR"
            shift
            ;;
        *)
            log_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Check for required privileges
require_root

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi