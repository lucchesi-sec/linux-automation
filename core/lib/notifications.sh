#!/bin/bash

# BashAdminCore - Notification Module
# Provides email and other notification capabilities

# Send email notification
send_email() {
    local subject="$1"
    local body="$2"
    local recipients="${3:-$(get_config 'email.recipients.admin')}"
    local format="${4:-text}"
    local attachment="$5"
    
    if [[ $(get_config 'notifications.email_enabled' 'false') != "true" ]]; then
        log_debug "Email notifications disabled, skipping" "NOTIFICATION"
        return 0
    fi
    
    local smtp_server=$(get_config 'email.smtp_server' 'localhost')
    local smtp_port=$(get_config 'email.smtp_port' '25')
    local from_address=$(get_config 'email.from_address' "bash-admin@$(hostname -d)")
    
    log_info "Sending email notification: $subject" "NOTIFICATION"
    
    # Create temporary email file
    local email_file=$(mktemp)
    local boundary="BASH_ADMIN_$(date +%s)_$$"
    
    {
        echo "From: Bash Admin <$from_address>"
        echo "To: $recipients"
        echo "Subject: $subject"
        echo "Date: $(date -R)"
        
        if [[ "$format" == "html" ]] || [[ -n "$attachment" ]]; then
            echo "MIME-Version: 1.0"
            echo "Content-Type: multipart/mixed; boundary=\"$boundary\""
            echo ""
            echo "--$boundary"
            
            if [[ "$format" == "html" ]]; then
                echo "Content-Type: text/html; charset=UTF-8"
            else
                echo "Content-Type: text/plain; charset=UTF-8"
            fi
            echo "Content-Transfer-Encoding: 8bit"
            echo ""
            echo "$body"
            
            # Add attachment if provided
            if [[ -n "$attachment" ]] && [[ -f "$attachment" ]]; then
                echo ""
                echo "--$boundary"
                echo "Content-Type: application/octet-stream"
                echo "Content-Disposition: attachment; filename=\"$(basename "$attachment")\""
                echo "Content-Transfer-Encoding: base64"
                echo ""
                base64 "$attachment"
            fi
            
            echo ""
            echo "--$boundary--"
        else
            echo "Content-Type: text/plain; charset=UTF-8"
            echo ""
            echo "$body"
        fi
    } > "$email_file"
    
    # Send email using available method
    if command -v sendmail >/dev/null 2>&1; then
        if sendmail -t < "$email_file"; then
            log_success "Email sent successfully via sendmail" "NOTIFICATION"
        else
            log_error "Failed to send email via sendmail" "NOTIFICATION"
            rm -f "$email_file"
            return 1
        fi
    elif command -v mail >/dev/null 2>&1; then
        if mail -s "$subject" "$recipients" < <(echo "$body"); then
            log_success "Email sent successfully via mail" "NOTIFICATION"
        else
            log_error "Failed to send email via mail" "NOTIFICATION"
            rm -f "$email_file"
            return 1
        fi
    else
        log_error "No email sending capability found (sendmail/mail)" "NOTIFICATION"
        rm -f "$email_file"
        return 1
    fi
    
    rm -f "$email_file"
    return 0
}

# Send notification to multiple channels
send_notification() {
    local level="$1"
    local title="$2"
    local message="$3"
    local category="${4:-GENERAL}"
    
    if [[ $(get_config 'notifications.enabled' 'true') != "true" ]]; then
        log_debug "Notifications disabled, skipping" "NOTIFICATION"
        return 0
    fi
    
    # Determine recipients based on level and category
    local recipients
    case "$level" in
        "CRITICAL"|"FATAL")
            recipients=$(get_config "email.recipients.security" "$(get_config 'email.recipients.admin')")
            ;;
        "ERROR")
            recipients=$(get_config "email.recipients.admin")
            ;;
        "WARN")
            recipients=$(get_config "email.recipients.admin")
            ;;
        *)
            recipients=$(get_config "email.recipients.admin")
            ;;
    esac
    
    # Create email body
    local email_body
    email_body="Bash Admin Notification

Level: $level
Category: $category
Host: $(hostname -f)
Time: $(date)
User: $(whoami)

Message:
$message

---
This notification was generated by Bash Admin on $(hostname -f)
"
    
    # Send email notification
    send_email "[$level] $title" "$email_body" "$recipients"
}

# Generate HTML report
generate_html_report() {
    local title="$1"
    local data="$2"
    local output_file="$3"
    
    local html_content="<!DOCTYPE html>
<html>
<head>
    <title>$title</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background-color: #f0f0f0; padding: 10px; border-radius: 5px; }
        .content { margin-top: 20px; }
        .timestamp { color: #666; font-size: 0.9em; }
        table { border-collapse: collapse; width: 100%; margin-top: 10px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .success { color: green; }
        .warning { color: orange; }
        .error { color: red; }
    </style>
</head>
<body>
    <div class=\"header\">
        <h1>$title</h1>
        <div class=\"timestamp\">Generated: $(date)</div>
        <div class=\"timestamp\">Host: $(hostname -f)</div>
    </div>
    <div class=\"content\">
        $data
    </div>
</body>
</html>"
    
    echo "$html_content" > "$output_file"
    log_info "HTML report generated: $output_file" "REPORT"
}

# Send report via email
send_report() {
    local report_file="$1"
    local subject="$2"
    local recipients="${3:-$(get_config 'email.recipients.admin')}"
    
    if [[ ! -f "$report_file" ]]; then
        log_error "Report file not found: $report_file" "NOTIFICATION"
        return 1
    fi
    
    local body="Please find the attached report generated on $(hostname -f) at $(date)."
    
    send_email "$subject" "$body" "$recipients" "text" "$report_file"
}